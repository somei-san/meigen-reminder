# Rules in this file were initially inferred by Visual Studio IntelliCode from the C:\MuneakiTools\名言リマインダー codebase based on best match to current usage at 2021/02/16
# You can modify the rules from these initially generated values to suit your own policies
# You can learn more about editorconfig here: https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-code-style-settings-reference
[*.cs]


#Core editorconfig formatting - indentation

#use soft tabs (spaces) for indentation
indent_style = space

#Formatting - new line options

#place catch statements on a new line
csharp_new_line_before_catch = true
#require members of object intializers to be on separate lines
csharp_new_line_before_members_in_object_initializers = true
#require braces to be on a new line for control_blocks, methods, and types (also known as "Allman" style)
csharp_new_line_before_open_brace = control_blocks, methods, types

#Formatting - organize using options

#sort System.* using directives alphabetically, and place them before other usings
dotnet_sort_system_directives_first = true

#Formatting - spacing options

#require a space before the colon for bases or interfaces in a type declaration
csharp_space_after_colon_in_inheritance_clause = true
#require a space after a keyword in a control flow statement such as a for loop
csharp_space_after_keywords_in_control_flow_statements = true
#require a space before the colon for bases or interfaces in a type declaration
csharp_space_before_colon_in_inheritance_clause = true
#remove space within empty argument list parentheses
csharp_space_between_method_call_empty_parameter_list_parentheses = false
#remove space between method call name and opening parenthesis
csharp_space_between_method_call_name_and_opening_parenthesis = false
#do not place space characters after the opening parenthesis and before the closing parenthesis of a method call
csharp_space_between_method_call_parameter_list_parentheses = false
#remove space within empty parameter list parentheses for a method declaration
csharp_space_between_method_declaration_empty_parameter_list_parentheses = false
#place a space character after the opening parenthesis and before the closing parenthesis of a method declaration parameter list.
csharp_space_between_method_declaration_parameter_list_parentheses = false

#Formatting - wrapping options

#leave code block on single line
csharp_preserve_single_line_blocks = true
#leave statements and member declarations on the same line
csharp_preserve_single_line_statements = true

#Style - Code block preferences

#prefer no curly braces if allowed
csharp_prefer_braces = false:suggestion

#Style - expression bodied member options

#prefer expression-bodied members for methods
csharp_style_expression_bodied_methods = true:suggestion

#Style - expression level options

#prefer the language keyword for member access expressions, instead of the type name, for types that have a keyword to represent them
dotnet_style_predefined_type_for_member_access = true:suggestion

#Style - implicit and explicit types

#prefer var over explicit type in all cases, unless overridden by another code style rule
csharp_style_var_elsewhere = true:suggestion
#prefer var is used to declare variables with built-in system types such as int *補足intやstringなどのビルとインシステム型でVarをつけさせるかどうか。文脈により明示的にしたいかどうか変わるはずなのでルール自体無効化
# csharp_style_var_for_built_in_types = true:suggestion
#prefer var when the type is already mentioned on the right-hand side of a declaration expression
csharp_style_var_when_type_is_apparent = true:suggestion

#Style - language keyword and framework type options

#prefer the language keyword for local variables, method parameters, and class members, instead of the type name, for types that have a keyword to represent them
dotnet_style_predefined_type_for_locals_parameters_members = true:suggestion

#Style - Modifier preferences

#when this rule is set to a list of modifiers, prefer the specified ordering.
csharp_preferred_modifier_order = public,private,internal,static,readonly,const:suggestion

#Style - qualification options ＊補足 this.をつけさせるかどうか

#prefer fields not to be prefaced with this. or Me. in Visual Basic
dotnet_style_qualification_for_field = true:suggestion
#prefer methods not to be prefaced with this. or Me. in Visual Basic
dotnet_style_qualification_for_method = true:suggestion
#prefer properties to be prefaced with this. in C# or Me. in Visual Basic
dotnet_style_qualification_for_property = true:suggestion


# styleCop.Analizerのルールカスタマイズ

# XMLドキュメントを出力するプロジェクト設定じゃないと許さない
dotnet_diagnostic.SA0001.severity = none
# コンストラクタはプロパティの前にかかないとダメ
dotnet_diagnostic.SA1201.severity = none
dotnet_diagnostic.SA1312.severity = none
# 波かっこの省略を許さない。'if(true) return;'とかがダメ
dotnet_diagnostic.SA1503.severity = none
# コメントの最後はピリオドじゃないとだめ
dotnet_diagnostic.SA1629.severity = none
# コンストラクタの宣言行にそれ以外の要素があるのを許さない。`public constractor(int i):base(i)`の`base`がダメとか 
dotnet_diagnostic.SA1128.severity = none
# namespase外でのusingを許さない
dotnet_diagnostic.SA1200.severity = none
# if(true){ 改行 } じゃなく if(true) 改行 { } じゃないといけない ＊VSデフォルトのフォーマッタの処理と競合するのでうざい
dotnet_diagnostic.SA1500.severity = none
# プロパティのXmlコメントは「Get or sets the ***」の形式にしないといけない
dotnet_diagnostic.SA1623.severity = none
# xmlコメントの例外説明を省いてはいけない
dotnet_diagnostic.SA1627.severity = none
# 各ファイルの先頭にヘッダコメントがないと許さない!
dotnet_diagnostic.SA1633.severity = none

